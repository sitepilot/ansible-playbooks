---
- name: "mysql : install packages"
  apt:
    pkg:
      - mysql-client
    state: present

- name: "mysql : install python packages"
  pip:
    name: "{{ item }}"
    state: present
  loop:
    - PyMySQL

- name: "mysql : create service folders"
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    state: directory
    mode: "{{ item.mode }}"
  loop:
    - path: "{{ root_path }}/services"
      mode: "0700"
      owner: "root"
    - path: "{{ root_path }}/services/mysql"
      mode: "0700"
      owner: "root"
    - path: "{{ root_path }}/services/mysql/data"
      mode: "0700"
      owner: "1001"

- name: "mysql : generate Docker Compose configuration"
  template:
    src: mysql_docker_compose.j2
    dest: "{{ root_path }}//services/mysql/docker-compose.yml"
    mode: "0600"

- name: "mysql : start containers"
  docker_compose:
    project_src: "{{ root_path }}/services/mysql"

- name: "mysql : check if .my.cnf file exists for 'root' user"
  stat:
    path: "/root/.my.cnf"
  register: root_my_cnf

- name: "mysql : copy .my.cnf file with root password credentials"
  template:
    src: mysql_my_cnf.j2
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: 0600
  vars:
    mysql_my_user: root
    mysql_my_password: "{{ mysql_password }}"
  when: not root_my_cnf.stat.exists

- name: "mysql : ensure '{{ admin }}' user has admin rights"
  mysql_user:
    name: "{{ admin }}"
    password: "{{ admin_password }}"
    priv: "*.*:ALL,GRANT"
    state: present
    host: "%"
    config_file: "/root/.my.cnf"
  register: result
  retries: 8
  delay: 10
  until: result is not failed
  no_log: true

- name: "mysql : copy .my.cnf file with '{{ admin }}' credentials"
  template:
    src: "mysql_my_cnf.j2"
    dest: "/home/{{ admin }}/.my.cnf"
    owner: "{{ admin }}"
    group: "{{ admin }}"
    mode: "0600"
  vars:
    mysql_user: "{{ admin }}"
    mysql_password: "{{ admin_password }}"
